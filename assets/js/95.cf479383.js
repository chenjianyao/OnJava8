(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{562:function(t,a,e){"use strict";e.r(a);var s=e(29),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_43-方法引用优于-lambda-表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_43-方法引用优于-lambda-表达式"}},[t._v("#")]),t._v(" 43. 方法引用优于 lambda 表达式")]),t._v(" "),e("p",[t._v("lambda 优于匿名类的主要优点是它更简洁。Java 提供了一种生成函数对象的方法，比 lambda 还要简洁，那就是：方法引用（method references）。下面是一段程序代码片段，它维护一个从任意键到整数值的映射。如果将该值解释为键的实例个数，则该程序是一个多重集合的实现。该代码的功能是，根据键找到整数值，然后在此基础上加 1：")]),t._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[t._v("map"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("merge")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" incr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" incr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("请注意，此代码使用 "),e("code",[t._v("merge")]),t._v(" 方法，该方法已添加到 Java 8 中的 "),e("code",[t._v("Map")]),t._v(" 接口中。如果没有给定键的映射，则该方法只是插入给定值; 如果映射已经存在，则合并给定函数应用于当前值和给定值，并用结果覆盖当前值。 此代码表示 "),e("code",[t._v("merge")]),t._v(" 方法的典型用例。")]),t._v(" "),e("p",[t._v("代码很好读，但仍然有一些样板的味道。 参数 "),e("code",[t._v("count")]),t._v(" 和 "),e("code",[t._v("incr")]),t._v(" 不会增加太多价值，并且占用相当大的空间。 真的，所有的 lambda 都告诉你函数返回两个参数的和。 从 Java 8 开始，"),e("code",[t._v("Integer")]),t._v(" 类（和所有其他包装数字基本类型）提供了一个静态方法总和，和它完全相同。 我们可以简单地传递一个对这个方法的引用，并以较少的视觉混乱得到相同的结果：")]),t._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[t._v("map"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("merge")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("方法的参数越多，你可以通过方法引用消除更多的样板。 然而，在一些 lambda 中，选择的参数名称提供了有用的文档，使得 lambda 比方法引用更具可读性和可维护性，即使 lambda 看起来更长。")]),t._v(" "),e("p",[t._v("只要方法引用能做的事情，就没有 lambda 不能完成的（只有一种情况例外 - 如果你好奇的话，参见 "),e("a",{attrs:{href:"https://docs.oracle.com/javase/specs/jls/se12/html/jls-9.html#jls-9.9",target:"_blank",rel:"noopener noreferrer"}},[t._v("JLS，9.9-2"),e("OutboundLink")],1),t._v("）。 也就是说，使用方法引用通常会得到更短，更清晰的代码。 如果 lambda 变得太长或太复杂，它们也会给你一个结果：你可以从 lambda 中提取代码到一个新的方法中，并用对该方法的引用代替 lambda。 你可以给这个方法一个好名字，并把它文档记录下来。")]),t._v(" "),e("p",[t._v("如果你使用 IDE 编程，它将提供替换 lambda 的方法，并在任何地方使用方法引用。通常情况下，你应该接受这个提议。偶尔，lambda 会比方法引用更简洁。这种情况经常发生在方法与 lambda 相同的类中。例如，考虑这段代码，它被假定出现在一个名为 "),e("code",[t._v("GoshThisClassNameIsHumongous")]),t._v(" 的类中：")]),t._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[t._v("service"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GoshThisClassNameIsHumongous")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("action")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("这个 lambda 类似于等价于下面的代码：")]),t._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[t._v("service"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("action")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("使用方法引用的代码段并不比使用 lambda 的代码片段更短也不清晰，所以优先选择后者。 在类似的代码行中，"),e("code",[t._v("Function")]),t._v(" 接口提供了一个通用的静态工厂方法来返回标识函数 "),e("code",[t._v("Function.identity()")]),t._v("。 不使用这种方法，而是使用等效的 lambda 内联代码："),e("code",[t._v("x -> x")]),t._v("，通常更短，更简洁。")]),t._v(" "),e("p",[t._v("许多方法引用是指静态方法，但有 4 种方法没有引用静态方法。 其中两个 Lambda 等式是特定（bound）和任意（unbound）对象方法引用。 在特定对象引用中，接收对象在方法引用中指定。 特定对象引用在本质上与静态引用类似：函数对象与引用的方法具有相同的参数。 在任意对象引用中，接收对象在应用函数对象时通过方法的声明参数之前的附加参数指定。 任意对象引用通常用作流管道（pipelines）中的映射和过滤方法（条目 45）。 最后，对于类和数组，有两种构造方法引用。 构造方法引用用作工厂对象。 下表总结了所有五种方法引用：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("方法引用类型"),e("br"),t._v("Method Ref Type")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("举例"),e("br"),t._v("Example")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Lambda 等式"),e("br"),t._v("Lambda Equivalent")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Static")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Integer::parseInt")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("str -> Integer.parseInt(str)")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Bound")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Instant.now()::isAfter")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Instant then = Instant.now(); "),e("br"),t._v(" t -> then.isAfter(t)")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Unbound")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("String::toLowerCase")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("str -> str.toLowerCase()")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Class Constructor")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("TreeMap<K, V>::new")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("() -> new TreeMap<K, V>")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Array Constructor")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("int[]::new")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("len -> new int[len]")])])])]),t._v(" "),e("p",[t._v("总之，方法引用通常为 lambda 提供一个更简洁的选择。 "),e("strong",[t._v("如果方法引用看起来更简短更清晰，请使用它们；否则，还是坚持 lambda。")])])])}),[],!1,null,null,null);a.default=n.exports}}]);